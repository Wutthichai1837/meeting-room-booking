import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/database';
import { extractToken, verifyToken } from '@/lib/auth';

export async function GET(request: NextRequest) {
  try {
    console.log('üì¶ GET /api/mybookings called');

    // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const authHeader = request.headers.get('authorization');
    const token = extractToken(authHeader);
    if (!token) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô' },
        { status: 401 }
      );
    }

    const payload = verifyToken(token);
    if (!payload || !payload.username) {
      return NextResponse.json(
        { success: false, message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 401 }
      );
    }

    const username = payload.username; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

    // üìÑ ‡∏≠‡πà‡∏≤‡∏ô query parameters
    const searchParams = request.nextUrl.searchParams;
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const offset = (page - 1) * limit;

    // üßæ Query ‡∏´‡∏•‡∏±‡∏Å
    const baseQuery = `
      FROM bookings b
      JOIN meeting_rooms r ON b.room_id = r.id
      WHERE b.username = ?
    `;

    const dataQuery = `
      SELECT 
        b.id, b.title, b.description, b.start_time, b.end_time, 
        b.attendees_count, b.status, b.created_at,
        r.name as room_name, r.location as room_location
      ${baseQuery}
      ORDER BY b.start_time DESC
      LIMIT ? OFFSET ?
    `;

    const countQuery = `SELECT COUNT(*) as total ${baseQuery}`;
    const queryParams = [username];

    const countResult = await db.queryRow(countQuery, queryParams) as any;
    const totalRecords = countResult?.total || 0;

    const bookingsRaw = await db.query(dataQuery, [...queryParams, limit, offset]) as any[];

    const bookings = bookingsRaw.map(booking => ({
      ...booking,
      username,
    }));

    return NextResponse.json({
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        bookings,
        pagination: {
          currentPage: page,
          totalPages: Math.ceil(totalRecords / limit),
          totalRecords,
          limit,
        },
      },
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô API /mybookings:', error);
    return NextResponse.json(
      { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üìù PUT /api/mybookings called');

    // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const authHeader = request.headers.get('authorization');
    const token = extractToken(authHeader);
    if (!token) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô' },
        { status: 401 }
      );
    }

    const payload = verifyToken(token);
    if (!payload || !payload.username) {
      return NextResponse.json(
        { success: false, message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 401 }
      );
    }

    const username = payload.username;
    const { id, title, description, start_time, end_time, attendees_count, status, room_name } = await request.json();

    if (!id) {
      return NextResponse.json(
        { success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö room_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô room_name
    let room_id = null;
    if (room_name) {
      const room = await db.queryRow(
        'SELECT id FROM meeting_rooms WHERE name = ?',
        [room_name]
      ) as any;
      
      if (!room) {
        return NextResponse.json(
          { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
          { status: 400 }
        );
      }
      room_id = room.id;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingBooking = await db.queryRow(
      'SELECT * FROM bookings WHERE id = ? AND username = ?',
      [id, username]
    ) as any;

    if (!existingBooking) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' },
        { status: 404 }
      );
    }
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const updateFields = [];
    const updateValues = [];
    
    if (title) {
      updateFields.push('title = ?');
      updateValues.push(title);
    }
    if (description !== undefined) {
      updateFields.push('description = ?');
      updateValues.push(description);
    }
    if (start_time) {
      updateFields.push('start_time = ?');
      updateValues.push(start_time);
    }
    if (end_time) {
      updateFields.push('end_time = ?');
      updateValues.push(end_time);
    }
    if (attendees_count !== undefined) {
      updateFields.push('attendees_count = ?');
      updateValues.push(attendees_count);
    }
    if (status) {
      updateFields.push('status = ?');
      updateValues.push(status);
    }
    if (room_id) {
      updateFields.push('room_id = ?');
      updateValues.push(room_id);
    }

    if (updateFields.length === 0) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó' },
        { status: 400 }
      );
    }

    const updateQuery = `UPDATE bookings SET ${updateFields.join(', ')} WHERE id = ? AND username = ?`;
    updateValues.push(id, username);

    const result = await db.query(updateQuery, updateValues);
    
    console.log('Update result:', result);

    return NextResponse.json({
      success: true,
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô PUT /mybookings:', error);
    return NextResponse.json(
      { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
      { status: 500 }
    );
  }
}
